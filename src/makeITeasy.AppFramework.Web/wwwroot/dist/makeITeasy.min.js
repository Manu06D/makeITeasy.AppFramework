function isNotNullOrUndefined(data) {
    return data !== null && data !== undefined && data != "undefined";
}

function isNullOrUndefined(data) {
    return !isNotNullOrUndefined(data);
}
function initDatatable(datatableID, searchFormID, columnRenderers, parameters) {

    tableModel = this['tableObject' + datatableID];
    var datatableSelector = "#" + datatableID;

    let options = buildOption(columnRenderers, parameters, tableModel);

    if (searchFormID != null) {

        options.ajax.data = function (d) {
            d.appJson = formDataToJson(searchFormID);
        };

        $(searchFormID).submit(function (event) {
            var myDataTable = $(datatableSelector).DataTable();

            if (isNotNullOrUndefined(myDataTable.settings()[0])) {
                if (myDataTable.settings()[0].oFeatures.bServerSide) {
                    myDataTable.ajax.reload();
                }
                else {
                    myDataTable.settings()[0].oFeatures.bServerSide = true;
                    myDataTable.ajax.reload();
                    myDataTable.settings()[0].oFeatures.bServerSide = false;
                }

                $(document).ajaxStop(function () {
                    $(datatableSelector).DataTable().columns.adjust();
                });
            }
        });
    }

    var table = $(datatableSelector).DataTable(options);


    table.on('xhr', function (e, settings, json) {
        if (tableModel.Options.ActivateDoubleClickOnRow == true) {
            $(datatableSelector + ' tbody').on('dblclick', 'tr', function () {
                var data = table.row(this);
                $(datatableSelector).trigger("dblClickEvent", [data.data(), data.id()]);
            });
        }

        $(datatableSelector).trigger("dblDataLoadEvent");
    });

    table.on('draw', function () {
        $(datatableSelector).trigger("dblDrawEvent");
    });
}

function datatableReload(datatableID, callback, resetPaging) {
    tableModel = this['tableObject' + datatableID];
    var datatableSelector = "#" + datatableID;
    var myDataTable = $(datatableSelector).DataTable();
    myDataTable.ajax.reload(callback, resetPaging == null ? true : resetPaging);
}

function buildOption(renderColumns, parameters, tableModel) {

    var options;
    if (parameters != null) {
        options = parameters;
        options.columns = [];
    }
    else {
        options = {
            "order": [[0, 'asc']],
            columns: [],
        };
    }

    tableModel.Columns.forEach(element => options.columns.push(convertToDatableColumn(element, renderColumns)));

    options.ajax = {
        "url": tableModel.ApiUrl,
        "type": "POST",
        "datatype": "json",
        "error": function (xhr, error, thrown) {
        }
    }

    if (options.columns != undefined && options.columns.length > 0) {
        let columnRawId = options.columns.filter(function (column) { return column.isRowId; })[0] || null;
        if (columnRawId != null) {
            options.rowId = columnRawId.data;
        }
    }

    let mergedOptions = Object.assign(options, tableModel.Options);

    return mergedOptions;
}

function convertToDatableColumn(column, columnRenderers) {

    let dataObject = {
        "data": column.Name,
        "name": column.Title,
        "autoWidth": column.AutoWidth,
        "visible": column.Visible,
        "orderable": column.Orderable,
        "isRowId": column.IsRowId
    };

    if (columnRenderers != null) {
        template = columnRenderers[dataObject.data];
        if (template != null) {
            dataObject.render = template;
        }
    }

    return dataObject;
}

function formDataToJson(selector) {
    const formElement = getFormData(selector);
    return formToJson(formElement);
}

function getFormData(formSelector) {
    var myForm = $(formSelector);
    if (myForm.length == 0 || myForm.find('.form-control').length == 0 || !isFormValid(formSelector))
        return;

    const formElement = myForm[0];

    return formElement;
}

function formToJson(element) {
    const formDico = convertFormToDico(element);
    return convertToJson(formDico);
}

function isFormValid(elementSelector) {
    $.validator.unobtrusive.parseDynamicContent(elementSelector);
    return $(elementSelector).valid();
}

function convertFormToDico(formElement) {
    let bodyData = {};
    for (const pair of new FormData(formElement)) {
        if (pair[0] !== "__RequestVerificationToken" && pair[1] !== "") {
            var t = formElement.querySelector("[name='" + pair[0] + "']");
            if (t.hasAttribute('multiple')) {
                var tab = [];
                if (bodyData[pair[0]] != null) {
                    for (var i = 0; i < bodyData[pair[0]].length; ++i) {
                        tab.push(bodyData[pair[0]][i]);
                    }
                }
                tab.push(pair[1]);
                bodyData[pair[0]] = tab;
            }
            else {
                bodyData[pair[0]] = pair[1];
            }
        }
    }
    return bodyData;
}

function convertToJson(element) {
    return JSON.stringify(element);
}

function checkAndValidateForm(searchFormID, submitButton) {
    let formElement = document.forms[searchFormID.split("#")[1]];

    if (formElement !== undefined) {

        //let isAnyData = hasFormElementAnycontent(formElement);

        let isFormValid = validateFormBySelector(searchFormID);

        if (submitButton.length > 0) {
            submitButton.prop('disabled', !isFormValid);
        }
    }
}

//function hasFormElementAnycontent(searchFormElement) {
//    let isAnyData = false;
//    for (let element of searchFormElement.elements) {
//        if (element.attributes['type'] !== 'hidden' && element.type !== 'submit' && element.type !== 'checkbox') {
//            if (element.value.length > 0) {
//                isAnyData = true;
//                break;
//            }
//        }
//    }

//    return isAnyData;
//}

function validateFormBySelector(elementSelector) {
    var form = $(elementSelector);
    var validate = false;

    validate = isFormValid(form);

    if (validate) {
        form.clearForm();
    }

    return validate;
}

function initFormControls(searchForm, contentChangedKey, submitButton) {
    var $form = $(searchForm);

    $form
        .off('input')
        .on('input', function (e) {
            checkAndValidateForm(searchForm, submitButton);
            window[contentChangedKey] = true;
        });

    checkAndValidateForm(searchForm, submitButton);
}
(function ($) {
    $.validator.unobtrusive.parseDynamicContent = function (selector) {
        //use the normal unobstrusive.parse method
        $.validator.unobtrusive.parse(selector);

        //get the relevant form
        var form = $(selector).first().closest('form');

        //get the collections of unobstrusive validators, and jquery validators
        //and compare the two
        var unobtrusiveValidation = form.data('unobtrusiveValidation');
        var validator = form.validate();

        if (unobtrusiveValidation !== undefined) {
            $.each(unobtrusiveValidation.options.rules, function (elname, elrules) {
                if (validator.settings.rules[elname] == undefined) {
                    var args = {};
                    $.extend(args, elrules);
                    args.messages = unobtrusiveValidation.options.messages[elname];
                    //edit:use quoted strings for the name selector
                    $("[name='" + elname + "']").rules("add", args);
                } else {
                    $.each(elrules, function (rulename, data) {
                        if (validator.settings.rules[elname][rulename] == undefined) {
                            var args = {};
                            args[rulename] = data;
                            args.messages = unobtrusiveValidation.options.messages[elname][rulename];
                            //edit:use quoted strings for the name selector
                            $("[name='" + elname + "']").rules("add", args);
                        }
                    });
                }
            });
        }
    }
})($);

(function ($) {
    $.fn.clearForm = function (options) {
        // This is the easiest way to have default options.
        var settings = $.extend({
            // These are the defaults.
            formId: this.closest('form')
        }, options);

        var $form = $(settings.formId);

        //reset jQuery Validate's internals
        $form.validate().resetForm();

        //reset unobtrusive validation summary, if it exists
        $form.find("[data-valmsg-summary=true]")
            .removeClass("validation-summary-errors")
            .addClass("validation-summary-valid")
            .find("ul").empty();

        //reset unobtrusive field level, if it exists
        $form.find("[data-valmsg-replace]")
            .removeClass("field-validation-error")
            .addClass("field-validation-valid")
            .empty();
        return $form;
    };
}(jQuery));
class saveModal {
    constructor() { }

    initModal(dataToggle) {
        let element = $(dataToggle);
        this.startLoading(element);

        let url = element.attr('data-url');
        let target = element.attr('data-target');
        let method = this.getMethod(element);
        element.prop('disabled', true);

        $[method](url).done((data) => {
            element.prop('disabled', false);

            var modal = $(target).html(data)[0];
            var modalID = modal.id;

            let contentChangedKey = 'modal_' + modalID + '_contentChanged';
            window[contentChangedKey] = false;

            var submitButton = $('#' + modalID + ' button[data-action="save"]');

            //init form
            if ($("#" + modalID + " form").length > 0) {
                var form = $("#" + modalID + " form")[0];
                var formID = "#" + form.id;

                $(target).on('shown.bs.modal', function () {
                    initFormControls(formID, contentChangedKey, submitButton);
                });

                var formAction = $(form).attr("action");
                if (!isNullOrUndefined(formAction)) {
                    url = formAction;
                }

                if (submitButton.length > 0) {
                    submitButton.bind("click", function () {
                        $('#modalAlert').hide();
                        $.ajax({
                            type: "POST",
                            url: url,
                            data: formToJson(form),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                element.trigger("saveDataEvent");
                                $(document).trigger("dataSavedEvent");
                                window['modal_' + modalID + '_contentChanged'] = false;
                                $(target + ' > .modal').modal('hide');
                            },
                            error: function (errMsg) {
                                console.log(errMsg);
                                $('#modalAlert').show();
                            }
                        });
                    });
                }
            }

            $(target + ' > .modal').modal('show');

            // Confirm message if content has changed
            $(target + ' > .modal').on('hide.bs.modal', function (e) {

                if (window['modal_' + modalID + '_contentChanged']) {
                    if (!confirm('Des modifications ont été détectées dans le formulaire. Souhaitez-vous les annuler ?')) {
                        e.preventDefault();
                    }
                }
            });

            this.stopLoading(element);
        });
    }



    startLoading(element) {
        this.oldText = element.html();
        element.html('<i class="fa fa-spin fa-spinner"></i>');
    }

    stopLoading(element) {
        element.html(this.oldText);
    }

    getMethod(element) {
        var method = element.attr('data-method');
        if (isNullOrUndefined(method)) {
            method = "get";
        }

        return method.toLowerCase();
    }
}